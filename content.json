[{"title":"java 算法 （排序算法 快速排序）","date":"2017-02-24T05:44:19.000Z","path":"2017/02/24/quickSort/","text":"ps:今天听了一首感动死我的歌，歌曲名是Bressanone（布列瑟农），听的时候全身鸡皮疙瘩都起来了，然后我就去搜这首歌，谁知道还有一个感人的故事。以下是作者自述，链接来着一个音乐推荐网站音乐链接 快速排序（Quick Sort）听着音乐差点都忘记了主题了，这篇blog的主题是快速排序。 思想：快速排序由C.A.R.Hoare （1962）开发的，算是分治算法的一种。该算法在数组中选择一个主元（pivot）的元素将数组分为两部分，使得第一部分中所有元素都小于或等于主元，而第二部分中的所有元素都大于主元。对第一第二部分递归调用。步骤： 取pivot 划分两部分 递归调用划分方法 具体代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** 快速排序*/public static void quickSort(int[] arr) &#123; System.out.println(&quot;&quot;); System.out.println(&quot;快速排序前的数组为： &quot;); for (int i : arr) &#123; System.out.print(i + &quot; &quot;); &#125; quickSort(arr, 0, arr.length - 1); System.out.println(&quot;&quot;); System.out.println(&quot;快速排序后的数组为：&quot;); for (int i : arr) &#123; System.out.print(i + &quot; &quot;); &#125;&#125;private static void quickSort(int[] arr, int first, int last) &#123; if (last &gt; first) &#123; int pivot = partition(arr, first, last); quickSort(arr, first, pivot - 1); quickSort(arr, pivot + 1, last); &#125;&#125;private static int partition(int[] arr, int first, int last) &#123; int pivot = arr[first]; // 主元 int low = first + 1; int high = last; while (high &gt; low) &#123; while (low &lt;= high &amp;&amp; arr[last] &lt;= pivot) &#123; low++; &#125; while (low &lt;= high &amp;&amp; arr[high] &gt; pivot) &#123; high--; &#125; if (high &gt; low) &#123; int temp = arr[high]; arr[high] = arr[low]; arr[low] = temp; &#125; &#125; while (high &gt; first &amp;&amp; arr[high] &gt;= pivot) &#123; high--; &#125; if (pivot &gt; arr[high]) &#123; arr[first] = arr[high]; arr[high] = pivot; return high; &#125; else &#123; return first; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455马修·连恩—布列瑟农谢谢你的评论，现在给你自己冲杯热茶，坐好，我接下来给你说个关于bressanone的故事......几年前，我疯狂地爱上了一个年轻的女孩，还有，也爱上了南部蒂罗尔山区，它在意大利的北部，与奥地利接壤，就在勃伦尔山脉的南边（勃伦尔山脉正好把意大利和奥地利分隔开来）。南部蒂罗尔曾经跟北部蒂罗尔（现在属于奥地利）和西部蒂罗尔（现在属于瑞士）是一个整体。这个地区的人说的是德国的一种方言，但是由于蒂罗尔被分割开来，而南部蒂罗尔变成意大利的一部分，所以这里的地名一般都有意大利文和德文两种名字。总之呢...许多年前我给绿色和平组织工作，在那时候我遇上了一个让我心动的女孩子。我们是在加州的约塞米蒂国家公园归途中相遇的。自那以后，她回到科罗拉多州的绿色和平组织，最后回到纽约洲去上学，而我则回到圣迭戈的绿色和平组织，并且最后回到我在加拿大育空地区的老家。此后的几个月里我们不停地通讯。很快我们都希望能有更进一步的发展。她将要去意大利的佛罗伦萨学习艺术，我就要去德国的慕尼黑开始新的表演生活，跟一支叫“三月粉”的摇滚乐队...哈啊，没错，三月粉...那是另外一个故事了。当我俩都在欧洲的时候，我们选了一个处在佛罗伦萨和慕尼黑之间的地方约会。这就是南部蒂罗尔的一个小镇，德文里面它叫“Brixen”，意大利文就是“bressanone”。Bressanone是个非常优美的小镇。它被小乡村包围着，而山谷中回响着教堂的钟声，山羊在牧场漫步，远处是高耸的白色山头。我们在那里玩乐了几天，探索过周围的小乡村，还有彼此的心。离别的日子到了，她要回去的时候我陪着她去附近乡村的火车站，真是很令人沮丧啊，我们都要踏上各自的道路。流着泪水，我上了去火车站的公共汽车，在短短的40分钟路程里，我缓缓入睡了，在梦中，我隐隐约约地似乎听到了这样的一首歌，非常美妙的旋律和歌词。我醒来的时候，赶紧下了车，来到最近的咖啡店，把所听到的旋律和歌词写在一张餐巾纸上，好让我能够永远地记住它。一年以后，我才有机会把这首歌录下来。在我的心里，永远会留个地方是给她，还有那些小乡村，和这首歌。谢谢你这么认真地听我说。现在...是时候跟你同睡了，晚安!!!:-)马修附原文：The Storyby Matthew LienDate: 02-20-02 18:10Hello Forrest,Thank you for your comments. Now make yourself a cup of hot tea, sit back, and I&apos;ll tell you a story about Bressanone...Several years ago, I fell deeply in love with a young woman, and also with a part of northern Italy known as South Tyrol. It borders Austria, just south of the Brenner mountain pass which separates Italy from Austria.South Tyrol used to be joined with North Tyrol (now a part of Austria) and West Tyrol (now a part of Switzerland). The people of this area speak a dialect of German. But since Tyrol was divided and South Tyrol became a part of Italy, all the place names are in both German and Italian.Anyway... I once worked for Greenpeace many years ago, where I met a young woman who melted my heart. We met while on a retreat in California&apos;s Yosemite National Park. After the retreat, she returned to the Colorado Greenpeace office, and eventually went back to school in New York state. I returned to the San Diego Greenpeace Office, and eventually went back to my home in the Yukon, Canada.Over the months we stayed in touch. Soon we discovered that we would both be close again. She was going to study art in Florence, Italy, and I was going to live in Munich, Germany performing with a rock band called &quot;Marching Powder&quot;... ahhhh yes, Marching Powder... but that&apos;s another story.When we were both in Europe, we made arrangements to meet in a place that was close to being between Florence and Munich. This was the South Tyrolian town called &quot;Brixen&quot; in German, or &quot;Bressanone&quot; in Italian. Bressanone is a beautiful town surrounded by small villages high in the mountain valleys with churches ringing and sheep in the meadows, and the awesome peaks of the Dolomite mountains towering beyond.We spent several days exploring the mountain villages and each other&apos;s hearts. And when the day came for her to return, I took her to a train station in a nearby village, and we said goodbye. It was very sad to be going our own ways again. With tears in my eyes, I got on a bus and headed for the train station in Bressanone. During the short 40-minute bus ride, I fell asleep. And while I slept, I had a dream in which I could hear this song, complete with the words and music. When I awoke, I got off the train and went to the nearest coffee shop to write the words and music on a napkin, so I would not forget.It was years later when I finally recorded the song. I will always have a place in my heart for her... and for that village... and for this song.Thank you for listening. Now... off to bed with you!!!:-)Matthew 参考链接故事","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"algorithm","slug":"algorithm","permalink":"http://yoursite.com/tags/algorithm/"}]},{"title":"java 算法 （排序算法 冒泡排序）","date":"2017-02-23T15:02:39.000Z","path":"2017/02/23/javahigh/","text":"题外话 ps:今天真的是被git弄的稀里糊涂了一天，弄到现在还在实验室，我都怀疑自己的认真劲头了😂。 以前觉得自己没有做技术的耐性，无法静静的呆在自己的电脑前。那个时候坐在电脑前都会流眼泪，那个时候就对自己说：是的我不合适做技术，然而读研的路上感觉自己的性格改变了很多，不敢说非常踏实，但是目前来说，静静地看着技术文档和书籍，常常能获得快感，就像现在已经过了12点，我在“奋笔疾书”。解决bug的时候有那么一丝丝成就感，不知道是不是自己越来越适合做技术了，感觉自己每天过的越来越充实和快乐，只要今天的自己比昨天的自己更强大。 正题 排序算法 分类 交换排序 冒泡排序 快速排序 选择排序 选择排序 堆排序 插入排序 插入排序 shell排序 合并排序 冒泡排序（Bubble Sort）思想：冒泡排序需要遍历多遍数组，在每次遍历🀄比较相邻的元素。较小值像“气泡”一样上浮，较大的值沉向底部。步骤： 对数组中的各个数据，依次比较相邻的两个数据大小 如果前面的数据大于后面的数据，就交换两个数据。这样可以找出最小的。 依次用同样的方法，排序。时间：$\\dfrac {n\\left( n-1\\right) } {2}=O\\left( n^{2}\\right)$ 123456789101112131415161718192021222324252627282930313233主要代码：package sort;import UtilAlgorithm.Main;import UtilAlgorithm.Util;/** * Created by xiezhanghua on 2017/2/23. */public class Sort &#123; public static int[] bubleSort(int[] arr) &#123; System.out.println(&quot;冒泡排序前的数组为：&quot;); for (int i : arr) &#123; System.out.print(i + &quot; &quot;); &#125; for (int i = 1; i &lt; arr.length; i++) &#123; for (int j = 0; j &lt; arr.length - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; &#125; System.out.println(&quot;&quot;); System.out.println(&quot;冒泡排序后的数组为：&quot;); for (int i : arr) &#123; System.out.print(i + &quot; &quot;); &#125; return arr; &#125;&#125; 参考书籍和链接 《java 常用算法手册》 《java 语言程序设计》","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"开发中的bug","date":"2017-02-22T05:40:48.000Z","path":"2017/02/22/bug/","text":"问题：解决maven 更新慢的问题系统：Mac解决方向：使用阿里镜像方法： cd /usr/local/Cellar/maven/3.3.9/libexec/conf(brew install maven 的路径) subl setting.xml (subl 在这里是使用sublime text 打开 文件 open -a ) 将下面代码替换setting.xml中的 mirrors 1234567891011121314151617181920&lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 参考链接blog1 hexo 中写数学公式 Latexps:今天本来是准备动手看算法方面的东西，然后准备使用hexo看下数学公式怎么显示。然后就出现问题了，显示的时候会出现很多莫名的问题。重要的是我都没有数学编辑器，😂话说论文也要写了啊。所以开始找个好一点的数学编辑器，然后在b呼中找到了。那么问题来了，是时候写一篇练习Latex的文档了。 submlim + Latexb呼推荐解决方法：就是把主题中的配置文件中的 mathjax: true 设置为true","tags":[{"name":"bug","slug":"bug","permalink":"http://yoursite.com/tags/bug/"},{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"数据库学习笔记一","date":"2017-02-19T14:45:29.000Z","path":"2017/02/19/transction/","text":"连接查询连接是把不同表的记录连到一起的最普遍的方法。 内连接：最普遍的连接类型，而且是最匀称的，因为它们要求构成连接的每一个部分的每个表匹配，不匹配的行将被排除。 外连接：使用outer join关键字将两个表连接起来。外连接生成的结果集不仅包括符合链接条件的行数据，而且还包括左表（左外连接）、右表（右边连接时的表）或两边链接表（全外连接时的表）中所有的数据行。 合并查询合并查询结果是将多个select语句的查询结果合并在一起。因为某种情况下，需要将几个select语句查询出来的结果合并起来显示。合并查询结果使用union和union all关键字。union关键字是将所有的查询结果合并在一起，然后去除相同记录；而union all关键字则只是简单地将结果合并在一起。 索引我们常见的数据库系统，其索引使用的数据结构多是B-Tree或者B+Tree。例如，MsSql使用的是B+Tree，Oracle及Sysbase使用的是B-Tree。所以在最开始，简单地介绍一下B-Tree。B-Tree 概念：索引是对数据库表中一个或多个列的值进行排序的结构。优点：在查询过程中使用索引，会提高数据库查询效率，应用索引来查询数据库中的内容，可以减少查询的次数，从而到达查询优化目的。缺点：创建索引和维护需要耗费时间，并且该耗费时间与数据量的大小成正比；另外，索引需要占用物理空间，给数据的维护造成很多麻烦。 索引分类 普通索引：不应用任何约束的索引，该索引可以在任何数据类型中创建。 唯一索引：使用UNIQUE参数可以设置唯一索引。该索引值必须唯一。主键是一种特殊的唯一索引。 全文索引：全文索引智能创建在CHAR、VARCHAR或者TEXT类型的字段上。查询数据量较大的字符串类型的字段时，使用全文索引可以提高查询速度。 单列索引：单列索引只对应一个字段的索引。 多列索引：在表的多个字段上创建一个索引。 事务处理 概念和技术事务处理系统的基本抽象：现实的状态通过一个称为数据库的抽象表示，现实状态的转变通过执行一个称为事务的执行过程来反映，他改变数据库的状态。P1 这里在介绍下事务的概念以及事务的ACID特性数据库事务（简称：事务）是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。ACID 原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。 一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。 隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。 持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。 参考书籍和链接《事务处理 概念和技术》《Mysql快速入门》详解SQL Server连接（内连接、外连接、交叉连接）索引","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"事务处理","slug":"事务处理","permalink":"http://yoursite.com/tags/事务处理/"}]},{"title":"数据库学习笔记二","date":"2017-02-19T14:45:29.000Z","path":"2017/02/19/mysql2/","text":"Mysql 视图概念： 视图可以包含表中的所有列，或者仅包含选定的列。视图可以创建自一个或者多个表，这取决于创建该视图的 SQL 语句的写法。视图，是一种虚拟的表，数据库只存放了视图的定义，并没有存放视图中的数据。优点：用户可以不用看到整个数据库表中的数据，而只关心对自己有用的数据即可。 作用： 简单性：所见即所需 安全性：授权 逻辑数据独立性：程序与数据库独立 视图与查询的区别： 视图和查询都是用由sql语句组成,这是他们相同的地方,但是视图和查询有着本质区别：它们的区别在于： 存储上的区别：视图存储为数据库设计的一部分,而查询则不是 更新限制的要求不一样要注意：因为视图来自于表,所以通过视图可以间接对表进行更新,我们也可以通过update语句对表进行更新,但是对视图和查询更新限制是不同的, 排序结果：通过sql语句,可以对一个表进行排序,而视图则不行。 Mysql 存储过程存储过程和存储函数是一些被用户定义的SQL语句集合，经编译后存储在数据库。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。其具有执行速度快，提高系统性能，确保数据库安全等诸多优点。 优点： 存储过程允许标准组件式编程 存储过程能够实现较快的执行速度 存储过程能够减少网络流量 存储过程可被作为一种安全机制来充分利用 参考书籍和链接《Mysql快速入门》博客一博客二","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"学习资料记录","date":"2017-02-17T06:31:59.000Z","path":"2017/02/17/reading/","text":"这里记录下每个阶段的学习资料 ##java 多线程和并发java 并发性和多线程并发编程网JDK8JDK6 mysql 忘记 root 密码 数据库《Mysql快速入门》 纸质书籍《事务处理的技术和概念》 这个学习的文档使电子书籍","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"reading","slug":"reading","permalink":"http://yoursite.com/tags/reading/"}]},{"title":"泰国游记第一天","date":"2017-02-07T03:11:48.000Z","path":"2017/02/07/thailand01/","text":"主题：出发 + 卧佛寺故事： 机场偶遇泰国留学生 欧洲老夫妻酒吧dancing","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"travel","slug":"travel","permalink":"http://yoursite.com/tags/travel/"},{"name":"thailand","slug":"thailand","permalink":"http://yoursite.com/tags/thailand/"}]},{"title":"泰国游记序言","date":"2017-02-04T15:44:55.000Z","path":"2017/02/04/thailand00/","text":"这是一次真正意义上的说走就走的旅行，当我看到我同门师弟（其实也不算师弟，我们同届，只是他晚来几天^-^）在买飞机票的时候我就好奇的问了句“去哪里玩吗？”同时回了句“我也去可以？”。就这样的两个问句开始我2017年的第一次旅游，同时也是我的第一次出国游，同时也完成了我许许多多的第一次。最最重要的使这是我第一次写游记，本来没这种兴趣的，但是不知道怎么就在手机上写了一些简单的记录，回来了也就想着干脆写游记吧。毕竟这一路上自己也遇到了一些坑，就当给别人一些参考也好，而且一边写着一边回忆起旅游的乐事，真的很有意思，有的时候都会笑出来声来。 首先简单介绍一下一起出行的6个人。 从前往后介绍：一排左一是我们的财政大臣，所有公费都放在这个boy手上，办事沉稳一排右一是我们的欢乐使者，气氛莫名尴尬的时候只需要他发声立马暖场二排左一和右一是太阳伞CP，只要有太阳自动组合三排左一和右一是绯闻CP，学校到泰国到学校都是绯闻CP那么问题来了，那个才是真的我 再简单介绍一下我们的行程：旅游方式：自助游+两个一日团行程：为期8天，旅游城市：清迈，普吉和曼谷住宿：名宿和酒店出行方式：飞机，出租，包车，船和嘟嘟车（凸凸车）电话：happy卡花费：旅游+购物 7000+RMB","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"travel","slug":"travel","permalink":"http://yoursite.com/tags/travel/"},{"name":"thailand","slug":"thailand","permalink":"http://yoursite.com/tags/thailand/"}]},{"title":"小章鱼2017年计划","date":"2017-01-14T15:53:55.000Z","path":"2017/01/14/2017plan/","text":"前言 2016年已经过去了。 2017年计划非技术文艺片 至少观看两部话剧(周五晚上)，话剧表演艺术以及观众对的素质，是我深深的爱上了话剧这种艺术形式 至少观看六部电影 至少看十本课外书，生活不止眼前的苟且，还有诗和远方的田野。 去上海野生动物园(携程买)，喜欢看BBC对于动物纪录片的记录。 找有意思的地方，逛逛街，拍照(周末)，陪她走过尘世的美好。 给对方写信(要真诚)，把真情融入文字中。 励志片(祝福她考研成功) 每天背单词(互相打卡)加油！ 坚定她考研信念，不放弃，给她鼓励。 最终目标 帮助她考上研究生，然后一起去台湾或者云南玩耍。","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"paln","slug":"paln","permalink":"http://yoursite.com/tags/paln/"}]},{"title":"hexo 安装第一篇","date":"2017-01-12T15:23:41.000Z","path":"2017/01/12/creathexo/","text":"第一步安装 nodenode 第二步安装 gitgit 第三部安装 hexo$ npm install -g hexo-cli 第四步创建hexo文件夹‘hexo init’这里有一个坑的地方在于使用的使npm安装的初始theme的时候很慢，你耐心等待就好了 第五步安装hexo依赖npm install 第六步创建hexo文件夹所在目录执行hexo ghexo s可以在localhost：4000访问到页面这里有一个坑的地方是如果以上步骤都对的话，如果访问4000端口没有页面，那就你就是安装了福新阅读器，不要问我问什么知道执行hexo s -p 5000 本地的介绍到这里 参考链接hexo官网博客","tags":[{"name":"小章鱼","slug":"小章鱼","permalink":"http://yoursite.com/tags/小章鱼/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Markdown 学习笔记","date":"2017-01-12T07:14:01.000Z","path":"2017/01/12/start/","text":"段落第一段第二段第三段源代码 # 第一段 ## 第二段 ### 第三段 列表 苹果 香蕉 菠萝源代码123* 苹果* 香蕉* 菠萝 引用、斜体、加粗 天空没有鸟的痕迹，但我已飞过。 –泰戈尔源代码&gt; _天空没有**鸟**的痕迹，但我已飞过_。 --泰戈尔 代码块1234567891011121314ul &#123; margin: 0 0; padding: 0 0; list-style-type: none;&#125;li &#123; float: right; width: 80px; height: 40px; margin-right: 5%; margin-bottom: 10px; line-height: 40px; text-align: center;&#125; 源代码(css ul { margin: 0 0; padding: 0 0; list-style-type: none; } li { float: right; width: 80px; height: 40px; margin-right: 5%; margin-bottom: 10px; line-height: 40px; text-align: center; }) 分割线 源代码 - - - 链接i am 404i am baidu源代码 [i am 404](https://twitter.com/Tracy_xzh) [i am baidu](https://www.baidu.com) 参考链接链接","tags":[{"name":"测试","slug":"测试","permalink":"http://yoursite.com/tags/测试/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"测试页面","date":"2017-01-12T03:38:53.000Z","path":"2017/01/12/mynewpost/","text":"开始用markdown语法写文章内容","tags":[{"name":"测试","slug":"测试","permalink":"http://yoursite.com/tags/测试/"}]}]